! Math++

! predefined tokens
! identifier
! integer
! real
! string
! boolean
! comment

<ROOT> ::= <factor>

<literal> ::= integer | real | string | boolean

<factor> ::= <opAssign> | <opPostFix>

<opAssign> ::= identifier '=' <factor>

<opPostFix> ::= <opOr>
			  | <opOr> '!'

<opOr> ::= <opAnd> <opOrTail>
<opOrTail> ::= <> | '||' <opAnd> <opOrTail> ! no more left recursion

<opAnd> ::= <opEquality> <opAndTail>
<opAndTail> ::= <> | '&&' <opEquality> <opAndTail>

<opEquality> ::= <opBitShift> <opEqualityTail>
<opEqualityTail> ::= <> | '==' <opBitShift> <opEqualityTail>
						| '~=' <opBitShift> <opEqualityTail>

<opBitShift> ::= <opAdd> <opBitShiftTail>
<opBitShiftTail> ::= <> | '>>' <opAdd> <opBitShiftTail>
						| '<<' <opAdd> <opBitShiftTail>

<opAdd> ::= <opMult> <opAddTail>
<opAddTail> ::= <> | '+' <opMult> <opAddTail>
				   | '-' <opMult> <opAddTail>

<opMult> ::= <opExp> <opMultTail>
<opMultTail> ::= <> | '*' <opExp> <opMultTail>
					| '/' <opExp> <opMultTail>
					| '%' <opExp> <opMultTail>

<opExp> ::= <opPrefix>
		  | <opPrefix> '^' <opExp>
		  
<opPrefix> ::= '~' <opPrefix>
			 | '-' <opPrefix>
			 | <primary>
			
<primary> ::= <primaryNonList>
		    | <listLiteral>
		   
<primaryNonList> ::= <literal>
				   | identifier
				   | <parenthetical>
				   | <methodCall>
				  
<parenthetical> ::= '(' <factor> ')' ! down we go again

<methodCall> ::= identifier '(' <argListOpt> ')'

<argListOpt> ::= <> | <argList>
<argList> ::= <factor> 
			| <factor> ',' <argList>
			
<listLiteral> ::= '{' <argListOpt> '}'